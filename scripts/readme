python scripts for feature extraction, and image visualization

1. BSpline_heart_1.py

Manual image segmentation using B-Splines. The following keys (keyboard) are required:
n: next image
x: save segmentations
Esc: close video. In this point, the program will ask to continue or not (y/n).

Initially, the program displays the first image (ED) with the B-Spline. The user can move the control points using the mouse (holding the left bottom).
Once the control points were placed according with the reference segmentation, the user can press 'n' to open the next image (ES).
Similarly, the user can adjust the control points to fit the B-spline to the reference image segmentation.
Afterwards, the user can press 'n' to finish the segmentation of that video. 
If the results are good, the user can save the segmentations pressing 'x'.
Finally, pressing 'Esc' the user has two options: close the program or open the next video.

The results are written in a file named 'controlpts_segmentations' in the folder 'data\'.


2. feature_extraction_ctlrpts.py

This script calculates features of the left ventricle deformation between end of diastole (ED) and end of systole (ES) from the data in 'controlpts_segmentations'. The features include scaling, rotation, and translation of the control points from ED to ES. Accordingly, each ED to ES deformation is represented by 21 features ('ang','x0','x1','x2','x3','x4','x5','x6','x7','x8','y0','y1','y2','y3','y4','y5','y6','y7','y8','c0','c1'); however, five of those features are always 0 ('x0', 'y0', 'x4', 'x8', 'y8'). The feature vectors are written in the in a file named 'features_ctlpts.csv' in the folder 'data\'.   


3. feature_extraction_intensities.py

Starting with the control points' location from 'controlpts_segmentations', we interpolate a set of control points for each frame from ED to ES for each video of the echocardiograms for training.
We extract pixel intensity distributions, sampling 50 regions of interest (ROI) along each B-Spline curve. We obtain a feature vector of 50 components for each frame; the values' range of each feature is between 0 and 1.
Results are written in the 'features_intensities' file in the 'data\' folder.


4. feature_extraction_textures.py

Similarly to the 'feature_extraction_intensities.py', we extract pixels' texture using Gray-Level Co-Occurrence Matrix (GLCM) from 50 ROI along the B-Spline curves. We calculate GLCM in four directions (0, 45, 90, and 135 degrees) with an offset equal to 1 (each pixel is compared to the inmediately neigbors' pixels). Thereafter, we calculate 'Homogenity' from each matrix calculated from each ROI, and we averaged the results of all selected directions. We obtain a feature vector of 50 components for each frame; the values' range of each feature is between 0 and 1.
Results are written in the 'features_textures' file in the 'data\' folder.






